<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫实战</title>
      <link href="/2019/04/07/%E7%88%AC%E8%99%AB/"/>
      <url>/2019/04/07/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="python爬虫实践"><a href="#python爬虫实践" class="headerlink" title="python爬虫实践"></a>python爬虫实践</h2><h3 id="爬取在线阅读小说网中的所有小说"><a href="#爬取在线阅读小说网中的所有小说" class="headerlink" title="爬取在线阅读小说网中的所有小说"></a>爬取在线阅读小说网中的所有小说</h3><p>本章是python的实践篇，将用python的两个库函数进行静态网站小说的爬取。（仅供学习使用，并非商业用途，如有侵权请联系）<br><a id="more"></a><br>用python库爬取在线阅读网小说（静态网站爬取）</p><p>【需要用到的库】：<br>requests库<br>BeautifulSoup库</p><p>【步骤】：</p><ol start="0"><li>定义两个列表分别保存网址和章节名</li></ol><p>z = []#用于存放地址的列表<br>x = []#用于存放章名的列表</p><ol><li>用requests库获取网页html文件</li></ol><p>def getsite():#获取章节地址和章节名称并保存<br>    url = input(“请输入目录网址(例：<a href="http://www.yuedu88.com/jieyouzahuodian/)：&quot;" target="_blank" rel="noopener">http://www.yuedu88.com/jieyouzahuodian/)：&quot;</a>)<br>    r = requests.get(url)<br>    r.encoding = “utf-8”<br>    html = r.text</p><ol start="2"><li><p>getsite()函数中用BeautifulSoup库获取每章地址</p><p> bt = BeautifulSoup(html, ‘html.parser’, )<br> texts = bt.find_all(class_=”chapterlist cate”)<br> web = BeautifulSoup(str(texts), ‘html.parser’, )<br> website = web.find_all(‘a’)<br> for site in website:</p><pre><code>z.append(site.get(&apos;href&apos;))  # 保存网址x.append(site.string)  # 保存章节</code></pre><p>3.获取每章内容并保存：</p></li></ol><p>def savefile():#获取章节内容并保存<br>    i = 0<br>    file=input(“请输入存储路径（例：D:\ebook\a.txt）：”)</p><pre><code>while i &lt;= len(z) - 1:    zz = str(i)    re = requests.get(str(z[i]))    re.encoding = &quot;utf-8&quot;    htmlz = re.text    be = BeautifulSoup(htmlz, &apos;html.parser&apos;, )    texte = be.find_all(id=&quot;BookText&quot;)    he = texte[0].text    with open(file, &apos;a&apos;, encoding=&quot;utf-8&quot;) as file_object:        file_object.write(&quot;第&quot; + zz + &quot;章&quot; + &quot; &quot; + x[i])        file_object.write(&apos;\n&apos;)        file_object.write(he)        file_object.write(&apos;\n&apos;)        file_object.write(&apos;\n&apos;)        print(&quot;正在下载第&quot; + zz + &quot;章&quot; +&quot; &quot;+ x[i])    i = i + 1</code></pre><ol start="4"><li>主函数中运行：</li></ol><p>try:<br>    getsite()<br>    savefile()<br>except:<br>    print(“下载失败”)</p><p>【完整代码】：</p><p>from bs4 import BeautifulSoup<br>import requests<br>z = []#用于存放地址的列表<br>x = []#用于存放章名的列表<br>def getsite():#获取章节地址和章节名称并保存<br>    url = input(“请输入目录网址(例：<a href="http://www.yuedu88.com/jieyouzahuodian/)：&quot;" target="_blank" rel="noopener">http://www.yuedu88.com/jieyouzahuodian/)：&quot;</a>)<br>    r = requests.get(url)<br>    r.encoding = “utf-8”<br>    html = r.text<br>    bt = BeautifulSoup(html, ‘html.parser’, )<br>    texts = bt.find_all(class_=”chapterlist cate”)<br>    web = BeautifulSoup(str(texts), ‘html.parser’, )<br>    website = web.find_all(‘a’)<br>    for site in website:<br>        z.append(site.get(‘href’))  # 保存网址<br>        x.append(site.string)  # 保存章节<br>def savefile():#获取章节内容并保存<br>    i = 0<br>    file=input(“请输入存储路径（例：D:\ebook\a.txt）：”)</p><pre><code>while i &lt;= len(z) - 1:    zz = str(i)    re = requests.get(str(z[i]))    re.encoding = &quot;utf-8&quot;    htmlz = re.text    be = BeautifulSoup(htmlz, &apos;html.parser&apos;, )    texte = be.find_all(id=&quot;BookText&quot;)    he = texte[0].text    with open(file, &apos;a&apos;, encoding=&quot;utf-8&quot;) as file_object:        file_object.write(&quot;第&quot; + zz + &quot;章&quot; + &quot; &quot; + x[i])        file_object.write(&apos;\n&apos;)        file_object.write(he)        file_object.write(&apos;\n&apos;)        file_object.write(&apos;\n&apos;)        print(&quot;正在下载第&quot; + zz + &quot;章&quot; +&quot; &quot;+ x[i])    i = i + 1</code></pre><p>try:<br>    getsite()<br>    savefile()<br>except:<br>    print(“下载失败”)</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2019/03/23/python/"/>
      <url>/2019/03/23/python/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="关于python的知识-第一部分"><a href="#关于python的知识-第一部分" class="headerlink" title="关于python的知识(第一部分)"></a>关于python的知识(第一部分)</h3><p>本篇文章是一篇本人学习python的笔记，以及总结的一些易错点。<br><a id="more"></a><br>【print】<br>在Python2中，无需将要打印的内容放在括号内。从技术上说，Python 3中的print是一个函数，因此括号必不可少。有些Python 2 print语句也包含括号，但其行为与Python3中稍有不同。简单地说，在Python 2代码中，有些print语句包含括号，有些不包含。<br>【乘方】<br>用两个乘号表示乘方运算。例：3的4次方为3<strong>4。<br>【非字符化字符】<br>可调用函数str()，它让python将非字符化为字符。<br>【列表末尾添加元素】<br>函数append()可将元素添加到列表末尾<br>【列表中插入元素】<br>函数insert()。例子：在第一个元素加入”c++”，insert(0,’c++’)<br>【知道元素位置删除列表元素】<br>函数del。del 列表名[位置]。<br>【弹出列表元素】<br>函数pop()。列表名.pop(列表元素位置)。<br>可将弹出的元素赋值给其他变量继续使用。<br>【知道元素值删除列表元素】<br>函数remove()。列表名.remove(列表元素值)。<br>可将删除的元素赋值给其他变量继续使用。<br>【sort排序与sorted排序】<br>sort()可永久将列表按字母顺序排序。<br>sorted()可让列表按特定顺序显示，但不影响元素在列表的原始排序<br>sort(reverse=Ture)列表按字母顺序相反排序。sorted()同理。<br>【reserve()反转】<br>reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序。<br>【列表长度】<br>len(列表名)。<br>【for不缩进】<br>在for循环后面，没有缩进的代码都只执行一次，而不会重复执行。<br>【数字列表的最大，最小，总和】<br>min(列表名)。max(列表名)。sum(列表名)。<br>【一行循环输出列表】<br>例子：squares = [value</strong>2 for value in range(1,11)] print(squares) squares = [value<strong>2 for value in range(1,11)] print(squares)要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value</strong>2，它计算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。在这个示例中，for循环为for value in range(1,11)，它将值1~10提供给表达式value**2。请注意，这里的for语句末尾没有冒号。<br>【切片】<br>例如，如果你要提取列表的第2~4个元素，可将起始索引指定为1，并将终止索引指定为4：players = [‘charles’, ‘martina’, ‘michael’, ‘florence’, ‘eli’] print(players[1:4]) </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挪威的森林</title>
      <link href="/2019/03/16/afilm/"/>
      <url>/2019/03/16/afilm/</url>
      
        <content type="html"><![CDATA[<h2 id="每个人都有属于自己的一片森林，也许我们-从来不曾去过，但它一直在那里，总会在那里。迷失的人迷失了，相逢的人会再相逢。"><a href="#每个人都有属于自己的一片森林，也许我们-从来不曾去过，但它一直在那里，总会在那里。迷失的人迷失了，相逢的人会再相逢。" class="headerlink" title="每个人都有属于自己的一片森林，也许我们 从来不曾去过，但它一直在那里，总会在那里。迷失的人迷失了，相逢的人会再相逢。"></a>每个人都有属于自己的一片森林，也许我们 从来不曾去过，但它一直在那里，总会在那里。迷失的人迷失了，相逢的人会再相逢。</h2>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world!</title>
      <link href="/2019/03/16/hello-ward/"/>
      <url>/2019/03/16/hello-ward/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>肖申克的救赎</title>
      <link href="/2019/03/16/four/"/>
      <url>/2019/03/16/four/</url>
      
        <content type="html"><![CDATA[<h2 id="强者救赎自己，圣人普度他人。"><a href="#强者救赎自己，圣人普度他人。" class="headerlink" title="强者救赎自己，圣人普度他人。"></a>强者救赎自己，圣人普度他人。</h2>]]></content>
      
      
      <categories>
          
          <category> 电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> films </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大鱼</title>
      <link href="/2019/03/16/three/"/>
      <url>/2019/03/16/three/</url>
      
        <content type="html"><![CDATA[<h2 id="你认为最邪恶、最坏的东西，大多只是孤独、缺乏融洽的个性。"><a href="#你认为最邪恶、最坏的东西，大多只是孤独、缺乏融洽的个性。" class="headerlink" title="你认为最邪恶、最坏的东西，大多只是孤独、缺乏融洽的个性。"></a>你认为最邪恶、最坏的东西，大多只是孤独、缺乏融洽的个性。</h2>]]></content>
      
      
      <categories>
          
          <category> 电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> films </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大鱼</title>
      <link href="/2019/03/16/two/"/>
      <url>/2019/03/16/two/</url>
      
        <content type="html"><![CDATA[<h2 id="The-more-difficult-something-is-the-more-rewarding-it-is-in-the-end"><a href="#The-more-difficult-something-is-the-more-rewarding-it-is-in-the-end" class="headerlink" title="The more difficult something is, the more rewarding it is in the end."></a>The more difficult something is, the more rewarding it is in the end.</h2>]]></content>
      
      
      <categories>
          
          <category> 电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> films </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挪威的森林</title>
      <link href="/2019/03/16/hello-world/"/>
      <url>/2019/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="哪会有人喜欢孤独，不过是不喜欢失望罢了。"><a href="#哪会有人喜欢孤独，不过是不喜欢失望罢了。" class="headerlink" title="哪会有人喜欢孤独，不过是不喜欢失望罢了。"></a>哪会有人喜欢孤独，不过是不喜欢失望罢了。</h2>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
